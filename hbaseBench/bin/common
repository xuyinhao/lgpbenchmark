#!/bin/bash
# Common func
# 

#hbasePathShell="/loongoop/hbase-1.3.1/bin/hbase  shell"
#hadoopPath="/loongoop/loongoop-1.0.6-v2.7.2/bin/hadoop"

# add common funca
if [ "$LOG_HBASE_RUN" == "" ];then
	LOG_HBASE_RUN="/tmp/lgp-run-hbase.detail.log"
fi

hbase_info(){
	#$1: msg $2:lineno
	init_log $LOG_HBASE_RUN
	log_info "$1" "$2" "$LOG_HBASE_RUN"
}

hbase_error(){
	#$1: msg $2:lineno
	init_log "$LOG_HBASE_RUN"
	log_error "$1" "$2" "$LOG_HBASE_RUN"
	syslog 	"lgptest_hbase" "$0" "1" "$1,$2"
}

hbaseShell(){
	cmd="$@"
	# "${cmd}"
	hbase_info "`echo "${cmd};exit"|$hbasePathShell 2>&1`"  "$LINENO" 
}

hbaseStdShell(){
	local s_cmd="$@"
    # "${cmd}"
    echo "${s_cmd};exit"|$hbasePathShell 2>&1

}
genString(){
	declare -i stringlenth=$1
  j=0;
  for i in {a..z};do array[$j]=$i;j=$(($j+1));done 
  for i in {A..Z};do array[$j]=$i;j=$(($j+1));done
  for ((i =0;i < ${stringlenth};i++));do strs="$strs${array[$(($RANDOM%$j))]}"; done;
        echo $strs
}

checkExistIndex(){
	local declare flag=1
	c_hbaseDes="$1"
	local c_tableName="$2"
	local c_index=$3
	
	if [[ "$c_hbaseDes" == "" ]];then
		c_hbaseDes=`echo "describe '$c_tableName'" |$hbasePathShell 2>&1`
	fi

	for i in $c_index
	do
		if [[ "$c_hbaseDes" =~ "$i" ]];then
			flag=0
			hbase_info "${FUNCNAME} $c_hbaseDes -- 包含 -- $i" "$LINENO"
		else 
			flag=1
			hbase_error "${FUNCNAME} $c_hbaseDes -- 不包含 -- $i" "$LINENO"
			break
		fi
	done
	echo $flag
}
checkExistInfoByScan(){
local s_tableName=$1
local s_info=$2

	s_hbasescan=`hbaseStdShell "scan '$s_tableName'" 2>&1`
	
	if [[ "$s_hbasescan" =~ "$s_info" ]];then
		echo 0	
		hbase_info "${FUNCNAME} $hbasescan -- 包含 -- $s_info" "$LINENO"
	else
		echo 1
		hbase_error "${FUNCNAME} $hbasescan -- 不包含 -- $s_info" "$LINENO"
	fi
}

checkExistTableColumn(){
	local declare flag=1		#false flag
	local tableName="$1"
	local column=$(echo "$@"|sed "s/ /,/"|awk -F "," '{print $2}' 2>&1)
	hbase_info "${FUNCNAME} Table:$tableName , column: $column ." "$LINENO"
	
	hbaseDes=`echo "describe '$tableName'" |$hbasePathShell 2>&1`
	if [[ "$hbaseDes" =~ "Table $tableName is" ]];then
		hbaseFs=$($hadoopPath fs -ls leofs:///hbase/data/default 2>&1 |grep "$tableName" )
		if [ $? -eq 0 ];then	## hadoop fs 存在表
			ret=`checkExistIndex "$hbaseDes" "$tableName" "$column"`
			if [ $ret -eq 0 ];then
				flag=0
			fi
		fi
	fi

	if [ $flag -ne 0 ];then
		hbase_error "${FUNCNAME} ,hbaseDes:$hbaseDes , hbaseFs:$hbaseFs" "$LINENO"
	fi

	echo $flag
}
#############################################
# Func: 检查A是否包含B .value1 是否包含value2
# Param: info checkvalue 
# Output  0:包含 1:不包含
#############################################
checkInfo(){
	local e_info="$1"
	local e_checkvalue=$2
	local declare flag=1
	
	if [[ "$e_info" =~ "$e_checkvalue" ]];then
		hbase_info "${FUNCNAME} $e_info -- 包含 -- $e_checkvalue" "$LINENO"
		echo 0 ;return 0
		
	fi
	hbase_error "${FUNCNAME} $e_info -- 不包含 -- $e_checkvalue" "$LINENO"	
	echo $flag

}

checkOk(){
	local e_flag=$1
 flag=1
 if [ 0 -eq $e_flag ]; then
  	flag=0
	echo $flag ;return $flag 
 else
 	echo $flag
fi
}

checkError(){
	local e_flag="$1"
	local e_retinfo="$2"
	local e_checkvalue="$3"
	flag=1
	if [ $e_flag -eq 0 ];then
		echo 0;return 0
	fi
	
	if [[ "$e_retinfo" =~ "$e_checkvalue" ]];then
		flag=0
		hbase_info "${FUNCNAME} $e_retinfo -- 包含 -- $e_checkvalue" "$LINENO"
		echo $flag ; return $flag
	fi
	hbase_error "${FUNCNAME} $e_retinfo -- 不包含 -- $e_checkvalue" "$LINENO"
	echo $flag ; return $flag
	

}


checkExistSnap(){
	local check_table=$1
	local check_snap=$2
	flag=1
	ret=`hbaseStdShell "list_snapshots" |grep " $check_table "`
	if [[ $ret =~ "$check_snap" ]];then
		flag=0
		hbase_info "${FUNCNAME} $ret -- 包含 -- $check_snap" "$LINENO"
		echo $flag ; return $flag
	fi
	hbase_error "${FUNCNAME} $ret -- 不包含 -- $check_snap" "$LINENO"
	echo $flag
	
}
checkLeoFSPath(){
	local l_path="$1"
	if [ -e `getMountPath`/"$l_path" ];then
		echo 0
		hbase_info "${FUNCNAME} `getMountPath`/$l_path 路径存在 " "$LINENO"
	else
		echo 1
		hbase_info "${FUNCNAME} `getMountPath`/$l_path 路径不存在 " "$LINENO"
	fi
}


checkHbasePath(){
:
}

catHdfsFile(){
	path=$1
	echo `$hadoopPath fs -cat $path 2>/dev/null` 
}

rmHdfsPath(){
	path=$1
	ret=`$hadoopPath fs -rmr $path 2>/dev/null`
	if [ $? -eq 0 ];then
		return 0
	else
		return 1
	fi
}

#######################################
# 获取loongoop在leofs的存放路径
# Param: None
# Output: pathdir   
######################################
function getMountPath(){
	val=`grep -n 'leofs.mountpoint.dir' ${leofsSitePath}`
	val=`expr ${val:0:1} + 1`
	str=`sed -n "${val}p" ${leofsSitePath}`
	str=${str#*<value>}
	str=${str%</value>*}
	if [[ "$str" == "" ]];then
    	mpath="/datapool/loongoop"
 	else
    	mpath=$str
 	fi
	echo $mpath
	hbase_info "${FUNCNAME} leofsmountpath:$mpath" "$LINENO"

}
###############################################################
# 在hbase创建一个表，并put数据 row3','name:3','row3_value
# Param: tablename
# Output: None
# Return: 0|1 (0:true,1:false)
##############################################################
createTableAndPut(){
	local e_tablename=$1
	hbaseShell "disable '$e_tablename';drop '$e_tablename';create '$e_tablename','name';put '$e_tablename','row1','name:1','row1_value';put '$e_tablename','row2','name:2','row2_value';put '$e_tablename','row3','name:3','row3_value';" >> $LOG_HBASE_RUN 2>&1
	ret=`checkExistInfoByScan "$e_tablename" "row3_value"`
	if [ $ret -eq 0 ];then
		hbase_info "${FUNCNAME} tablename:$e_tablename " "$LINENO"
		return 0
	else
		hbase_error "${FUNCNAME} tablename:$e_tablename " "$LINENO"
		return 1
	fi
}
getNsByTablename(){
    local tablename="$1"
    if [[ "$tablename" =~ ":" ]];then
        namespace=`echo "$tablename"|awk -F ":" '{print $1}'`
        n_tablename=`echo "$tablename"|awk -F ":" '{print $2}'`
    else
        namespace="default"
        n_tablename=$tablename
    fi
    echo  $namespace
	hbase_info "${FUNCNAME} namespace:$namespace " "$LINENO"
}

getTbnameByTablename(){
    local tablename="$1"
    if [[ "$tablename" =~ ":" ]];then
        namespace=`echo "$tablename"|awk -F ":" '{print $1}'`
        n_tablename=`echo "$tablename"|awk -F ":" '{print $2}'`
    else
        namespace="default"
        n_tablename=$tablename
    fi
    echo  $n_tablename
	hbase_info "${FUNCNAME} tablename:$n_tablename " "$LINENO"
}

###############################
# 检查表是 不存在
# Param: 表名字
# Output: 0|1 （0：不存在）
###############################
checkNotExistTable(){
	local tablename="$1"
	namespace=`getNsByTablename $tablename`
	n_tablename=`getTbnameByTablename $tablename`
	
	##1 check table exist
	ret1=`hbaseStdShell "list"`
	if [[ ! "$ret1" =~ "$tablename" ]];then				#不包含表
		##2 check leo path exist
		if [ ! `checkLeoFSPath /hbase/data/$namespace/$n_tablename` -eq 0 ];then		#路径不存在
			echo 0;return 0
		fi
	fi	
	echo 1

}

####################################
# Func: 创建命名空间 namespace
# Param: nsName 
# Output: 0|1 (0:true,1:false)
###################################
createNs(){
	local nsName=$1
	
	hbaseShell "drop_namespace '$nsName';create_namespace '$nsName'"
	if [ $? -eq 0 ];then
		echo 0;return 0
	else
		hbase_error "${FUNCNAME} nsName:$nsName " "$LINENO"
		echo 1;return 1
	fi
}
#####################################
#Func: 检查是否存在namespace
# Param: nsName (命名空间的名字)
# Output: 0|1 . (0:pass,1:fail)
# Return: 0|1
#####################################
checkExistNs(){
	local nsName=$1
	flag=1
	ret=`hbaseStdShell "list_namespace"`
	if [[ $ret =~ $nsName ]];then
		echo 0;return 0
	fi
	hbase_error "$FUNCNAME list_namespace-ret:$ret , nsName:$nsName" "$LINENO"
	echo 1;return 1
}

disableAll(){
	tableName="$1"
	hbase_info "${FUNCNAME} disable_all:$tableName " "$LINENO"
	echo -e "disable_all '$tableName'\ny"|$hbasePathShell -n  >> $LOG_HBASE_RUN 2>&1
}

dropAll(){
	tableName="$1"
	hbase_info "${FUNCNAME} drop_all:$tableName " "$LINENO"
    echo -e "drop_all '$tableName'\ny"|$hbasePathShell -n >> $LOG_HBASE_RUN 2>&1
}

enableAll(){
    tableName="$1"
	hbase_info "${FUNCNAME} enable_all:$tableName " "$LINENO"
    echo -e "enable_all '$tableName'\ny"|$hbasePathShell -n >> $LOG_HBASE_RUN 2>&1
}

checkFlushPath(){
	local flushtable="$1"
	local tableCol="$2"
	leofsPath=`getMountPath`
	namespace=`getNsByTablename $flushtable`
    n_tablename=`getTbnameByTablename $flushtable`
	
	getflushnum=`ls $leofsPath/hbase/data/$namespace/$n_tablename/*/$tableCol/ 2>/dev/null |wc -l`
	[ $? -eq 0 ] && echo $getflushnum

}
